{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getViews","a","fetch","then","r","json","views","map","v","location","id","locationName","display","getView","view","src","undefined","data","time","Date","App","props","state","i","poller","window","setInterval","snap","setState","pollers","containers","this","key","className","img","alt","toString","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAeMA,G,MAAQ,uCAAG,sBAAAC,EAAA,+EACRC,MAAM,gDACVC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAK,OAAIA,EAAMC,KAAI,SAACC,GACxB,MAAO,CACLC,SAAUD,EAAEE,GACZC,aAAcH,EAAEI,gBANP,2CAAH,sDAWRC,EAAO,uCAAG,WAAOC,GAAP,SAAAb,EAAA,+EACLC,MAAM,gDAAD,OAAiDY,IAC1DX,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACJ,MAAO,CACLU,SAAmBC,IAAdX,EAAKY,KAAqB,GAA1B,gCAAwDZ,EAAKY,MAClEC,KAAM,IAAIC,KAAKd,EAAKa,WANd,2CAAH,sDA4EEE,E,YAxDb,WAAmBC,GAAY,IAAD,8BAC5B,4CAAMA,KACDC,MAAQ,CACXhB,MAAO,IAETN,IACGG,MAAK,SAAAG,GAAK,OAAIA,EAAMC,KAAI,SAACC,EAAGe,GAC3B,OAAO,eACFf,EADL,CAEEgB,OAAQC,OAAOC,aAAY,WACzBb,EAAQL,EAAEC,UACPN,MAAK,SAAAwB,GAAS,IACLrB,EAAU,EAAKgB,MAAfhB,MACS,KAAbqB,EAAKZ,IACPT,EAAMiB,GAAGI,UAAOX,EAEhBV,EAAMiB,GAAGI,KAAOA,EAElB,EAAKC,SAAS,CAAEtB,eAEnB,cAGNH,MAAK,SAAA0B,GAAO,OAAI,EAAKD,SAAS,CAAEtB,MAAOuB,OAvBd,E,sEA0Bb,IAETC,EADYC,KAAKT,MAAfhB,MACiBC,KAAI,SAAAO,GAC3B,QAAkBE,IAAdF,EAAKa,KACP,OACE,yBAAKK,IAAKlB,EAAKL,SAAUwB,UAAU,kBACjC,4BAAKnB,EAAKH,cACV,2BAAG,yCAIT,IAAMuB,OAAoBlB,IAAdF,EAAKa,KAAqB,sCAAiB,yBAAKZ,IAAKD,EAAKa,KAAKZ,IAAKoB,IAAG,kBAAarB,EAAKa,KAAKT,QAC1G,OACE,yBAAKc,IAAKlB,EAAKL,SAAUwB,UAAU,kBACjC,4BAAKnB,EAAKH,cACTuB,EACD,2BAAG,6CAAmBpB,EAAKa,KAAKT,KAAKkB,iBAI3C,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,WACZH,Q,GAlDOO,IAAMC,WCjCJC,QACW,cAA7Bd,OAAOhB,SAAS+B,UAEe,UAA7Bf,OAAOhB,SAAS+B,UAEhBf,OAAOhB,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.76fb896e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\ninterface Snapshot {\n  src: string,\n  time: Date,\n}\n\ninterface LiveView {\n  snap?: Snapshot\n  location: string,\n  locationName: string,\n}\n\nconst getViews = async (): Promise<LiveView[]> => {\n  return fetch('https://food-truck-spy.appspot.com/api/views')\n    .then(r => r.json() as Promise<{ id: string, display: string }[]>)\n    .then(views => views.map((v): LiveView => {\n      return {\n        location: v.id,\n        locationName: v.display,\n      }\n    }));\n}\n\nconst getView = async (view: string): Promise<Snapshot> => {\n    return fetch(`https://food-truck-spy.appspot.com/api/views/${view}`)\n      .then(r => r.json() as Promise<{ data?: string, time: string }>)\n      .then(json => {\n        return {\n          src: json.data === undefined ? '' : `data:image/png;base64,${json.data}`,\n          time: new Date(json.time),\n        }\n      });\n}\n\ninterface LiveViewPoller extends LiveView {\n  poller: number,\n}\n\ninterface AppState {\n  views: LiveViewPoller[], \n}\n\nclass App extends React.Component<{}, AppState> {\n  public constructor(props: {}) {\n    super(props)\n    this.state = {\n      views: [],\n    };\n    getViews()\n      .then(views => views.map((v, i): LiveViewPoller => {\n        return {\n          ...v,\n          poller: window.setInterval(() => {\n            getView(v.location)\n              .then(snap => {\n                const { views } = this.state;\n                if (snap.src === \"\") {\n                  views[i].snap = undefined;\n                } else {\n                  views[i].snap = snap;\n                }\n                this.setState({ views });\n              });\n          }, 15000),\n        }\n      }))\n      .then(pollers => this.setState({ views: pollers }));\n  }\n\n  public render() {\n    const { views } = this.state;\n    const containers = views.map(view => {\n      if (view.snap === undefined) {\n        return (\n          <div key={view.location} className=\"view-container\">\n            <h2>{view.locationName}</h2>\n            <p><em>Loading</em></p>\n          </div>\n        );\n      }\n      const img = view.snap === undefined ? <p>Loading</p> : <img src={view.snap.src} alt={`View of ${view.snap.time}`} />\n      return (\n        <div key={view.location} className=\"view-container\">\n          <h2>{view.locationName}</h2>\n          {img}\n          <p><em>Last Updated: {view.snap.time.toString()}</em></p>\n        </div>\n      )\n    })\n    return (\n      <div className=\"App\">\n        <div className=\"viewers\">\n          {containers}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}